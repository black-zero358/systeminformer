name: Build System Informer (Official Method)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          # 保留子模块并获取全部历史，避免部分脚本依赖 git 历史失败
          submodules: 'recursive'
          fetch-depth: 0

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2

      - name: NuGet Cache
        uses: actions/cache@v4
        with:
          path: packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.config') }}
          restore-keys: nuget-${{ runner.os }}-

      - name: Nuget Restore
        working-directory: ${{ github.workspace }}
        shell: cmd
        run: nuget restore .\packages.config -PackagesDirectory .\packages\

      - name: Run build_init.cmd (initialize tools / generate headers)
        working-directory: ${{ github.workspace }}
        shell: cmd
        run: build\build_init.cmd

      - name: Verify generated files & search for missing symbols (debug)
        working-directory: ${{ github.workspace }}
        shell: cmd
        run: |
          echo ==== List build output and include dirs ====
          if exist build\output (dir /b /s build\output) else echo no build\output
          echo ==== search for phlib headers and settings ====
          dir /b /s phlib\*.h || dir /b /s SystemInformer\*.h || echo "no phlib headers found"
          echo ==== grep for PhGetIntegerSetting declaration ====
          findstr /s /n /c:"PhGetIntegerSetting" *.h *.c *.cpp || echo "PhGetIntegerSetting not found in sources"

      - name: (optional) Build thirdparty libs (if your logs previously had LINK C1047)
        working-directory: ${{ github.workspace }}
        shell: cmd
        run: |
          if exist build\build_thirdparty.cmd (
            echo "Running build_thirdparty.cmd"
            build\build_thirdparty.cmd
          ) else (
            echo "No build_thirdparty.cmd present - skipping"
          )

      - name: Run Release Build
        working-directory: ${{ github.workspace }}
        shell: cmd
        run: build\build_release.cmd

      - name: Upload Artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: SystemInformer-Binary-Win32
          path: bin/Release32/
